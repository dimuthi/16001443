/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.DegreeController;
import Controller.FacultyController;
import Controller.PostgraduateDetailsController;
import Controller.StudentRegistrationController;
import Controller.UndergraduateDetailsController;
import DTO.AllRegistrationDTO;
import DTO.DegreeDTO;
import DTO.FacultyDTO;
import DTO.PostgraduateDetailsDTO;
import DTO.StudentRegistrationDTO;
import DTO.UndergraduateDetailsDTO;
import java.awt.Color;
import java.awt.Font;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import utilities.CustomizeTable;
import utilities.CustomizeTableHeader;

/**
 *
 * @author dimut
 */
public class StudentRegistration extends javax.swing.JPanel {

    private static StudentRegistration studentRegistration;
    private PanelUg panelUg;
    private PanelPg panelPg;
    private DefaultTableModel mdlRegistration;
    private int facultyLoadCount = 0;
    private int coursesLoadCount = 0;
    private DegreeDTO graduationType;

    /**
     * Creates new form Registration
     */
    private StudentRegistration() {
        initComponents();
        setSize(2270, 1140);
        mdlRegistration = (DefaultTableModel) tblRegistrations.getModel();
        panelUg = PanelUg.getInstance();
        panelPg = PanelPg.getInstance();
        AutoCompleteDecorator.decorate(cmbFaculty);
        AutoCompleteDecorator.decorate(cmboCourse);
        AutoCompleteDecorator.decorate(cmboIntake);
        customizeSubjectsTable();
    }

    public static StudentRegistration getInstance() {
        if (studentRegistration == null) {
            studentRegistration = new StudentRegistration();
        }
        return studentRegistration;
    }

    public void setInitialStage() {
        loadFaculties();
        loadCourses();
        loadPanelDetails();
        loadTable();
        clearFields();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cmbFaculty = new javax.swing.JComboBox<String>();
        btnsave = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cmboIntake = new javax.swing.JComboBox();
        cmboCourse = new javax.swing.JComboBox();
        pnlDetails = new javax.swing.JPanel();
        pneRegistrations = new javax.swing.JScrollPane();
        tblRegistrations = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        txtStudentId = new javax.swing.JTextField();
        txtregistrationid = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(null);

        jLabel3.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel3.setText("FACULTY");
        add(jLabel3);
        jLabel3.setBounds(50, 60, 160, 40);

        jLabel7.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel7.setText("STUDENT ID");
        add(jLabel7);
        jLabel7.setBounds(50, 180, 190, 40);

        cmbFaculty.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        cmbFaculty.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFacultyItemStateChanged(evt);
            }
        });
        cmbFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFacultyActionPerformed(evt);
            }
        });
        add(cmbFaculty);
        cmbFaculty.setBounds(290, 60, 320, 40);

        btnsave.setFont(new java.awt.Font("Bookman Old Style", 1, 24)); // NOI18N
        btnsave.setText("SAVE");
        btnsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsaveActionPerformed(evt);
            }
        });
        add(btnsave);
        btnsave.setBounds(1450, 1050, 222, 49);

        jLabel10.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel10.setText("INTAKE");
        add(jLabel10);
        jLabel10.setBounds(1720, 40, 110, 40);

        jLabel12.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel12.setText("COURSE (DEGREE)");
        add(jLabel12);
        jLabel12.setBounds(960, 40, 240, 40);

        cmboIntake.setBackground(new java.awt.Color(240, 240, 240));
        cmboIntake.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        cmboIntake.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FEBRUARY", "JULY" }));
        add(cmboIntake);
        cmboIntake.setBounds(1910, 40, 170, 40);

        cmboCourse.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        cmboCourse.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmboCourseItemStateChanged(evt);
            }
        });
        add(cmboCourse);
        cmboCourse.setBounds(1300, 40, 310, 40);

        pnlDetails.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout pnlDetailsLayout = new javax.swing.GroupLayout(pnlDetails);
        pnlDetails.setLayout(pnlDetailsLayout);
        pnlDetailsLayout.setHorizontalGroup(
            pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2220, Short.MAX_VALUE)
        );
        pnlDetailsLayout.setVerticalGroup(
            pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        add(pnlDetails);
        pnlDetails.setBounds(30, 255, 2220, 300);

        tblRegistrations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Registration ID", "Student Name", "Degree", "Date"
            }
        ));
        tblRegistrations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRegistrationsMouseClicked(evt);
            }
        });
        pneRegistrations.setViewportView(tblRegistrations);

        add(pneRegistrations);
        pneRegistrations.setBounds(30, 580, 2220, 430);

        jLabel8.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel8.setText("REGISTRATION ID");
        add(jLabel8);
        jLabel8.setBounds(960, 150, 240, 40);

        txtStudentId.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        txtStudentId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStudentIdActionPerformed(evt);
            }
        });
        txtStudentId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtStudentIdKeyReleased(evt);
            }
        });
        add(txtStudentId);
        txtStudentId.setBounds(290, 180, 305, 40);

        txtregistrationid.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        add(txtregistrationid);
        txtregistrationid.setBounds(1300, 150, 320, 40);

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        jLabel1.setText("S");
        add(jLabel1);
        jLabel1.setBounds(260, 180, 20, 40);

        btnUpdate.setFont(new java.awt.Font("Bookman Old Style", 1, 24)); // NOI18N
        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        add(btnUpdate);
        btnUpdate.setBounds(1730, 1050, 222, 49);

        btnDelete.setFont(new java.awt.Font("Bookman Old Style", 1, 24)); // NOI18N
        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete);
        btnDelete.setBounds(2000, 1050, 222, 49);
    }// </editor-fold>//GEN-END:initComponents

    private void btnsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsaveActionPerformed
        if (isNotBlank()) {
            try {
                AllRegistrationDTO allRegistrationDTO = new AllRegistrationDTO(); //undergraduate postgraduate table

                StudentRegistrationDTO registrationDTO = new StudentRegistrationDTO();
                registrationDTO.setRegistrationId(txtregistrationid.getText());
                registrationDTO.setStudentID("S" + txtStudentId.getText());
                registrationDTO.setFacultyId(FacultyController.getFacultyId(cmbFaculty.getSelectedItem().toString()).getFacultyId());
                registrationDTO.setDegreeid(DegreeController.getDegreeId(cmboCourse.getSelectedItem().toString()).getDegreeid());
                registrationDTO.setGraduationType(graduationType.getGraduationType());
                registrationDTO.setIntake(cmboIntake.getSelectedItem().toString());
                allRegistrationDTO.setRegistrationDTO(registrationDTO);

                if (graduationType.getGraduationType().equals("UG")) {
                    UndergraduateDetailsDTO undergraduateDetailsDTO = new UndergraduateDetailsDTO();
                    ArrayList<String> allText = panelUg.getAllText();
                    undergraduateDetailsDTO.setRegistrationId(txtregistrationid.getText());
                    undergraduateDetailsDTO.setSchool(allText.get(0));
                    undergraduateDetailsDTO.setYearAl(allText.get(1));
                    undergraduateDetailsDTO.setZscore(Double.parseDouble(allText.get(2)));
                    undergraduateDetailsDTO.setAlResults(allText.get(3));
                    allRegistrationDTO.setUndergraduateDetailsDTO(undergraduateDetailsDTO);
                } else {
                    PostgraduateDetailsDTO postgraduateDetailsDTO = new PostgraduateDetailsDTO();
                    ArrayList<String> allText = panelPg.getAllText();
                    postgraduateDetailsDTO.setRegistrationId(txtregistrationid.getText());
                    postgraduateDetailsDTO.setQualificationType(allText.get(0));
                    postgraduateDetailsDTO.setInstitute(allText.get(1));
                    postgraduateDetailsDTO.setYear(allText.get(2));
                    allRegistrationDTO.setPostgraduateDetailsDTO(postgraduateDetailsDTO);
                }
                boolean addStudentRegistration = StudentRegistrationController.addStudentRegistration(allRegistrationDTO);
                if (addStudentRegistration) {
                    loadTable();
                }
            } catch (Exception ex) {
                Logger.getLogger(StudentRegistration.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnsaveActionPerformed

    private void cmbFacultyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFacultyItemStateChanged
        if (facultyLoadCount > 0) {
            loadCourses();
            loadPanelDetails();
            loadTable();
            panelPg.clearFields();
            panelUg.clearFields();
        }
    }//GEN-LAST:event_cmbFacultyItemStateChanged

    private void cmboCourseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmboCourseItemStateChanged
        if (coursesLoadCount > 0) {
            loadPanelDetails();
            loadTable();
            panelPg.clearFields();
            panelUg.clearFields();
        }
    }//GEN-LAST:event_cmboCourseItemStateChanged

    private void txtStudentIdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStudentIdKeyReleased
        try {
            String[] split = cmbFaculty.getSelectedItem().toString().split(" ");
            String suffixGrad = graduationType.getGraduationType().charAt(0) + "";
            String regId = "";
            for (String string : split) {
                regId = suffixGrad + string.substring(0, 2) + "";
            }
            txtregistrationid.setText(regId + txtStudentId.getText());
            filterTable();
        } catch (Exception ex) {
            Logger.getLogger(StudentRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtStudentIdKeyReleased

    private void tblRegistrationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRegistrationsMouseClicked
        if (tblRegistrations.getSelectedRow() > -1) {
            try {
                cmboCourse.setSelectedItem(tblRegistrations.getValueAt(tblRegistrations.getSelectedRow(), 2));
                StudentRegistrationDTO studentIdWithIntake = StudentRegistrationController.getStudentIdWithIntake(tblRegistrations.getValueAt(tblRegistrations.getSelectedRow(), 0).toString());
                cmboIntake.setSelectedItem(studentIdWithIntake.getIntake());
                txtregistrationid.setText(tblRegistrations.getValueAt(tblRegistrations.getSelectedRow(), 0).toString());
                txtStudentId.setText(studentIdWithIntake.getStudentID().substring(1));
                if (graduationType.getGraduationType().equals("UG")) {
                    UndergraduateDetailsDTO undergraduateDetails = UndergraduateDetailsController.getUndergraduateDetails(tblRegistrations.getValueAt(tblRegistrations.getSelectedRow(), 0).toString());
                    ArrayList<String> textList = new ArrayList<>();
                    textList.add(undergraduateDetails.getSchool());
                    textList.add(undergraduateDetails.getYearAl());
                    textList.add(undergraduateDetails.getZscore() + "");
                    textList.add(undergraduateDetails.getAlResults());
                    panelUg.setAllText(textList);
                } else {
                    PostgraduateDetailsDTO postgraduateDetails = PostgraduateDetailsController.getPostgraduateDetails(tblRegistrations.getValueAt(tblRegistrations.getSelectedRow(), 0).toString());
                    ArrayList<String> textList = new ArrayList<>();
                    textList.add(postgraduateDetails.getQualificationType());
                    textList.add(postgraduateDetails.getInstitute());
                    textList.add(postgraduateDetails.getYear());
                    panelPg.setAllText(textList);
                }
            } catch (Exception ex) {
                Logger.getLogger(StudentRegistration.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_tblRegistrationsMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            if (isNotBlank()) {
                if (graduationType.getGraduationType().equals("UG")) {
                    UndergraduateDetailsDTO undergraduateDetailsDTO = new UndergraduateDetailsDTO();
                    ArrayList<String> allText = panelUg.getAllText();
                    undergraduateDetailsDTO.setRegistrationId(txtregistrationid.getText());
                    undergraduateDetailsDTO.setSchool(allText.get(0));
                    undergraduateDetailsDTO.setYearAl(allText.get(1));
                    undergraduateDetailsDTO.setZscore(Double.parseDouble(allText.get(2)));
                    undergraduateDetailsDTO.setAlResults(allText.get(3));
                    UndergraduateDetailsController.updateUndergraduateDetails(undergraduateDetailsDTO);
                } else {
                    PostgraduateDetailsDTO postgraduateDetailsDTO = new PostgraduateDetailsDTO();
                    ArrayList<String> allText = panelPg.getAllText();
                    postgraduateDetailsDTO.setRegistrationId(txtregistrationid.getText());
                    postgraduateDetailsDTO.setQualificationType(allText.get(0));
                    postgraduateDetailsDTO.setInstitute(allText.get(1));
                    postgraduateDetailsDTO.setYear(allText.get(2));
                    PostgraduateDetailsController.updatePostgraduateDetails(postgraduateDetailsDTO);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(StudentRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (tblRegistrations.getSelectedRow() > -1) {
            try {
                boolean deleteStudentRegistration = StudentRegistrationController.deleteStudentRegistration(tblRegistrations.getValueAt(tblRegistrations.getSelectedRow(), 0).toString());
                if (deleteStudentRegistration) {
                    loadTable();
                }
            } catch (Exception ex) {
                Logger.getLogger(StudentRegistration.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtStudentIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStudentIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStudentIdActionPerformed

    private void cmbFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFacultyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbFacultyActionPerformed

    /*Check whether the textfields are empty*/
    private boolean isNotBlank() {
        if (graduationType.getGraduationType().equals("UG")) {
            return (!txtStudentId.getText().equals("") && !txtregistrationid.getText().equals("") && panelUg.isNotBlank());
        } else {
            return (!txtStudentId.getText().equals("") && !txtregistrationid.getText().equals("") && panelPg.isNotBlank());
        }
    }

    /*Clear textfields*/
    private void clearFields() {
        txtStudentId.setText(null);
        txtregistrationid.setText(null);
        panelPg.clearFields();
        panelUg.clearFields();
    }

    /*Load the relavant panel according to the graduation type*/
    private void loadPanelDetails() {
        try {
            graduationType = DegreeController.getGraduationType(cmboCourse.getSelectedItem().toString());
            if (graduationType.getGraduationType().equals("UG")) {
                pnlDetails.removeAll();
                pnlDetails.add(panelUg);
                pnlDetails.revalidate();
                pnlDetails.repaint();
            } else {
                pnlDetails.removeAll();
                pnlDetails.add(panelPg);
                pnlDetails.revalidate();
                pnlDetails.repaint();
            }
        } catch (Exception ex) {
            Logger.getLogger(StudentRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Load degrees to combo box*/
    private void loadCourses() {
        try {
            coursesLoadCount = 0;
            ArrayList<DegreeDTO> degreeNamesViaFaculty = DegreeController.getDegreeNamesViaFaculty(FacultyController.getFacultyId(cmbFaculty.getSelectedItem().toString()).getFacultyId());
            cmboCourse.removeAllItems();
            for (DegreeDTO degreeDTO : degreeNamesViaFaculty) {
                cmboCourse.addItem(degreeDTO.getDegreeName());
            }
            coursesLoadCount++;
        } catch (Exception ex) {
            Logger.getLogger(StudentRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Load faculties to combo box*/
    private void loadFaculties() {
        try {
            facultyLoadCount = 0;
            ArrayList<FacultyDTO> allFaculties = FacultyController.getAllFaculties();
            cmbFaculty.removeAllItems();
            for (FacultyDTO faculty : allFaculties) {
                cmbFaculty.addItem(faculty.getFacultyName());
            }
            facultyLoadCount++;
        } catch (Exception ex) {
            Logger.getLogger(Lecturer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Load table using faculty id,degree id*/
    private void loadTable() {
        try {
            StudentRegistrationDTO registrationDTO = new StudentRegistrationDTO();
            registrationDTO.setFacultyId(FacultyController.getFacultyId(cmbFaculty.getSelectedItem().toString()).getFacultyId());
            registrationDTO.setDegreeid(DegreeController.getDegreeId(cmboCourse.getSelectedItem().toString()).getDegreeid());
            ArrayList<StudentRegistrationDTO> studentRegistration = StudentRegistrationController.getStudentRegistration(registrationDTO);
            mdlRegistration.setRowCount(0);
            for (StudentRegistrationDTO studentRegistrationDTO : studentRegistration) {
                Object[] ob = {studentRegistrationDTO.getRegistrationId(), studentRegistrationDTO.getFirstName() + " " + studentRegistrationDTO.getLastName(), studentRegistrationDTO.getDegreeName(), studentRegistrationDTO.getDate()};
                mdlRegistration.addRow(ob);
            }
        } catch (Exception ex) {
            Logger.getLogger(StudentRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Load table using registration id (while typing)*/
    private void filterTable() {
        try {
            ArrayList<StudentRegistrationDTO> studentRegistration = StudentRegistrationController.getStudentRegistrationViaRegId(txtregistrationid.getText());
            mdlRegistration.setRowCount(0);
            for (StudentRegistrationDTO studentRegistrationDTO : studentRegistration) {
                Object[] ob = {studentRegistrationDTO.getRegistrationId(), studentRegistrationDTO.getFirstName() + " " + studentRegistrationDTO.getLastName(), studentRegistrationDTO.getDegreeName(), studentRegistrationDTO.getDate()};
                mdlRegistration.addRow(ob);
            }
        } catch (Exception ex) {
            Logger.getLogger(StudentRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Customize Table*/
    private void customizeSubjectsTable() {
        tblRegistrations.setDefaultRenderer(Object.class, new CustomizeTable());
        tblRegistrations.getTableHeader().setDefaultRenderer(new CustomizeTableHeader());
        tblRegistrations.setRowHeight(30);
        tblRegistrations.setShowGrid(true);
        tblRegistrations.setFont(new Font("", 0, 18));
        pneRegistrations.getViewport().setBackground(Color.WHITE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnsave;
    private javax.swing.JComboBox<String> cmbFaculty;
    private javax.swing.JComboBox cmboCourse;
    private javax.swing.JComboBox cmboIntake;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane pneRegistrations;
    private javax.swing.JPanel pnlDetails;
    private javax.swing.JTable tblRegistrations;
    private javax.swing.JTextField txtStudentId;
    private javax.swing.JLabel txtregistrationid;
    // End of variables declaration//GEN-END:variables
}
