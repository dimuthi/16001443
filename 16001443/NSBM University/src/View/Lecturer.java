/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.FacultyController;
import Controller.LecturerController;
import Controller.SubjectController;
import DTO.FacultyDTO;
import DTO.LecturerDTO;
import DTO.SubjectDTO;
import java.awt.Color;
import java.awt.Font;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import utilities.CustomizeTable;
import utilities.CustomizeTableHeader;

/**
 *
 * @author dimut
 */
public class Lecturer extends javax.swing.JPanel {

    private static Lecturer lecturer;
    private DefaultTableModel mdlLecturer;
    private DefaultTableModel mdlSubjects;
    private int facultyLoadCount;

    /**
     * Creates new form Lecturer
     */
    private Lecturer() {
        initComponents();
        setSize(2270, 1140);
        mdlLecturer = (DefaultTableModel) tblLecturer.getModel();
        mdlSubjects = (DefaultTableModel) tblSubjects.getModel();
        AutoCompleteDecorator.decorate(cmbFaculty);
        AutoCompleteDecorator.decorate(cmblgender);
        customizeLecturerSubjectsTable();
    }

    public static Lecturer getInstance() {
        if (lecturer == null) {
            lecturer = new Lecturer();
        }
        return lecturer;
    }

    public void setInitialStage() {
        loadFaculties();
        loadTable();
        clearFields();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtlecturerid = new javax.swing.JTextField();
        txtmobile = new javax.swing.JTextField();
        txtname = new javax.swing.JTextField();
        txtladdress = new javax.swing.JTextField();
        cmblgender = new javax.swing.JComboBox();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        pneLecturer = new javax.swing.JScrollPane();
        tblLecturer = new javax.swing.JTable();
        cmbFaculty = new javax.swing.JComboBox();
        jLabel17 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        pneSubjects = new javax.swing.JScrollPane();
        tblSubjects = new javax.swing.JTable();
        btnAddSubjects = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(2206, 1035));
        setLayout(null);

        jLabel11.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel11.setText("GENDER");
        add(jLabel11);
        jLabel11.setBounds(930, 230, 209, 41);

        jLabel12.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel12.setText("LECTURER ID");
        add(jLabel12);
        jLabel12.setBounds(930, 20, 209, 41);

        jLabel13.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel13.setText("EMAIL");
        add(jLabel13);
        jLabel13.setBounds(40, 230, 209, 41);

        jLabel14.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel14.setText("ADDRESS");
        add(jLabel14);
        jLabel14.setBounds(40, 120, 209, 41);

        jLabel15.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel15.setText("LECTURER NAME");
        add(jLabel15);
        jLabel15.setBounds(930, 120, 209, 41);

        jLabel16.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel16.setText("MOBILE NUMBER");
        add(jLabel16);
        jLabel16.setBounds(40, 340, 205, 41);

        txtlecturerid.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        txtlecturerid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtlectureridKeyReleased(evt);
            }
        });
        add(txtlecturerid);
        txtlecturerid.setBounds(1160, 20, 430, 40);

        txtmobile.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        txtmobile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtmobileKeyReleased(evt);
            }
        });
        add(txtmobile);
        txtmobile.setBounds(270, 340, 430, 40);

        txtname.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        add(txtname);
        txtname.setBounds(1160, 120, 430, 40);

        txtladdress.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        add(txtladdress);
        txtladdress.setBounds(270, 120, 430, 40);

        cmblgender.setBackground(new java.awt.Color(240, 240, 240));
        cmblgender.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        cmblgender.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MALE", "FEMALE" }));
        add(cmblgender);
        cmblgender.setBounds(1160, 230, 150, 40);

        btnDelete.setFont(new java.awt.Font("Bookman Old Style", 1, 24)); // NOI18N
        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete);
        btnDelete.setBounds(1480, 420, 180, 49);

        btnUpdate.setFont(new java.awt.Font("Bookman Old Style", 1, 24)); // NOI18N
        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        add(btnUpdate);
        btnUpdate.setBounds(1710, 420, 180, 49);

        btnSave.setFont(new java.awt.Font("Bookman Old Style", 1, 24)); // NOI18N
        btnSave.setText("SAVE");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        add(btnSave);
        btnSave.setBounds(1260, 420, 180, 49);

        tblLecturer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lecturer ID", "Lecturer Name", "Address", "Email", "Mobile Number", "Gender", "Faculty"
            }
        ));
        tblLecturer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLecturerMouseClicked(evt);
            }
        });
        pneLecturer.setViewportView(tblLecturer);
        if (tblLecturer.getColumnModel().getColumnCount() > 0) {
            tblLecturer.getColumnModel().getColumn(0).setPreferredWidth(10);
            tblLecturer.getColumnModel().getColumn(5).setResizable(false);
            tblLecturer.getColumnModel().getColumn(5).setPreferredWidth(10);
            tblLecturer.getColumnModel().getColumn(6).setResizable(false);
            tblLecturer.getColumnModel().getColumn(6).setPreferredWidth(100);
        }

        add(pneLecturer);
        pneLecturer.setBounds(20, 500, 2230, 290);

        cmbFaculty.setBackground(new java.awt.Color(240, 240, 240));
        cmbFaculty.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        cmbFaculty.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFacultyItemStateChanged(evt);
            }
        });
        add(cmbFaculty);
        cmbFaculty.setBounds(270, 20, 430, 40);

        jLabel17.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel17.setText("FACULTY");
        add(jLabel17);
        jLabel17.setBounds(40, 20, 209, 41);

        txtEmail.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        txtEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmailKeyReleased(evt);
            }
        });
        add(txtEmail);
        txtEmail.setBounds(270, 230, 430, 40);

        tblSubjects.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject Code", "Subject Name", "Credits"
            }
        ));
        pneSubjects.setViewportView(tblSubjects);

        add(pneSubjects);
        pneSubjects.setBounds(20, 820, 2230, 280);

        btnAddSubjects.setFont(new java.awt.Font("Bookman Old Style", 1, 24)); // NOI18N
        btnAddSubjects.setText("ADD SUBJECTS");
        btnAddSubjects.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSubjectsActionPerformed(evt);
            }
        });
        add(btnAddSubjects);
        btnAddSubjects.setBounds(1930, 420, 260, 49);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel6.setText("     (xxx-xxxxxxx)");
        add(jLabel6);
        jLabel6.setBounds(400, 400, 210, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (isNotBlank()) {
            try {
                boolean deleteLecturer = LecturerController.deleteLecturer(txtlecturerid.getText());
                if (deleteLecturer) {
                    //JOptionPane.showMessageDialog(this, "Success");
                    loadTable();
                    clearFields();
                } else {
                    JOptionPane.showMessageDialog(this, "Error");
                }
            } catch (Exception ex) {
                Logger.getLogger(Lecturer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (isNotBlank()) {
            try {
                LecturerDTO lecturerDTO = new LecturerDTO();
                lecturerDTO.setLecturerID(txtlecturerid.getText());
                lecturerDTO.setLecturerName(txtname.getText());
                lecturerDTO.setAddress(txtladdress.getText());
                lecturerDTO.setEmail(txtEmail.getText());
                lecturerDTO.setTelephone(txtmobile.getText());
                lecturerDTO.setGender(cmblgender.getSelectedItem().toString());
                lecturerDTO.setFacultyId(FacultyController.getFacultyId(cmbFaculty.getSelectedItem().toString()).getFacultyId());

                boolean addLecturer = LecturerController.addLecturer(lecturerDTO);
                if (addLecturer) {
                    //JOptionPane.showMessageDialog(this, "Success");
                    loadTable();
                    clearFields();
                } else {
                    JOptionPane.showMessageDialog(this, "Error");
                }
            } catch (SQLException ex) {
                Logger.getLogger(Subjects.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Subjects.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(Subjects.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (isNotBlank()) {
            try {
                LecturerDTO lecturerDTO = new LecturerDTO();
                lecturerDTO.setLecturerID(txtlecturerid.getText());
                lecturerDTO.setLecturerName(txtname.getText());
                lecturerDTO.setAddress(txtladdress.getText());
                lecturerDTO.setEmail(txtEmail.getText());
                lecturerDTO.setTelephone(txtmobile.getText());
                lecturerDTO.setGender(cmblgender.getSelectedItem().toString());
                lecturerDTO.setFacultyId(FacultyController.getFacultyId(cmbFaculty.getSelectedItem().toString()).getFacultyId());
                boolean updateLecturer = LecturerController.updateLecturer(lecturerDTO);
                if (updateLecturer) {
                    //JOptionPane.showMessageDialog(this, "Success");
                    loadTable();
                    clearFields();
                } else {
                    JOptionPane.showMessageDialog(this, "Error");
                }
            } catch (Exception ex) {
                Logger.getLogger(Lecturer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void tblLecturerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLecturerMouseClicked
        try {
            loadDataToFields();
            mdlSubjects.setRowCount(0);
            ArrayList<SubjectDTO> allSubjectsViaLecturer = SubjectController.getAllSubjectsViaLecturer(tblLecturer.getValueAt(tblLecturer.getSelectedRow(), 0).toString());
            for (SubjectDTO subjectDTO : allSubjectsViaLecturer) {
                Object[] ob = {subjectDTO.getSubjectId(), subjectDTO.getSubjectName(), subjectDTO.getCredits()};
                mdlSubjects.addRow(ob);
            }
        } catch (Exception ex) {
            Logger.getLogger(Lecturer.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_tblLecturerMouseClicked

    
    private void btnAddSubjectsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSubjectsActionPerformed
        if (isNotBlank()) {
            WelcomePage.getInstance().setSubjectPanel();
            Subjects subject = Subjects.getInstance();
            ArrayList<String> text = new ArrayList<>();
            text.add(cmbFaculty.getSelectedItem().toString());
            text.add(txtname.getText());
            text.add(txtlecturerid.getText());
            subject.setLecturerDetails(text);
            subject.setSaveEnable();
        }
    }//GEN-LAST:event_btnAddSubjectsActionPerformed

    private void cmbFacultyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFacultyItemStateChanged
        if (facultyLoadCount > 0) {
            loadTable();
        }
    }//GEN-LAST:event_cmbFacultyItemStateChanged

    //this is for search a lecturer
    private void txtlectureridKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtlectureridKeyReleased
        try {
            txtlecturerid.setText(txtlecturerid.getText().toUpperCase());
            mdlLecturer.setRowCount(0);
            mdlSubjects.setRowCount(0);
            ArrayList<LecturerDTO> allLecturers = LecturerController.getAllLecturersViaLecId(txtlecturerid.getText());
            for (LecturerDTO lecturerDTO : allLecturers) {
                Object[] ob = {lecturerDTO.getLecturerID(), lecturerDTO.getLecturerName(), lecturerDTO.getAddress(), lecturerDTO.getEmail(), lecturerDTO.getTelephone(), lecturerDTO.getGender(), lecturerDTO.getFacultyName()};
                mdlLecturer.addRow(ob);
            }
        } catch (Exception ex) {
            Logger.getLogger(Subjects.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtlectureridKeyReleased

    private void txtEmailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmailKeyReleased
        // TODO add your handling code here:
        emailValidate(txtEmail);
    }//GEN-LAST:event_txtEmailKeyReleased

    private void txtmobileKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmobileKeyReleased
        validatePhoneNumber(txtmobile);
    }//GEN-LAST:event_txtmobileKeyReleased

    /*Check whether the textfields are empty*/
    private boolean isNotBlank() {
        return (!txtEmail.getText().equals("") && !txtladdress.getText().equals("") && !txtlecturerid.getText().equals("") && !txtmobile.getText().equals("") && !txtname.getText().equals(""));
    }

    /*Clear textfields*/
    private void clearFields() {
        txtlecturerid.setText(null);
        txtname.setText(null);
        txtladdress.setText(null);
        txtEmail.setText(null);
        txtmobile.setText(null);
    }

    /*Load table using faculty id*/
    private void loadTable() {
        try {
            mdlLecturer.setRowCount(0);
            mdlSubjects.setRowCount(0);
            ArrayList<LecturerDTO> allLecturers = LecturerController.getAllLecturers(FacultyController.getFacultyId(cmbFaculty.getSelectedItem().toString()).getFacultyId());
            for (LecturerDTO lecturerDTO : allLecturers) {
                Object[] ob = {lecturerDTO.getLecturerID(), lecturerDTO.getLecturerName(), lecturerDTO.getAddress(), lecturerDTO.getEmail(), lecturerDTO.getTelephone(), lecturerDTO.getGender(), lecturerDTO.getFacultyName()};
                mdlLecturer.addRow(ob);
            }
        } catch (Exception ex) {
            Logger.getLogger(Subjects.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
   

    /*Load data to textfields*/
    private void loadDataToFields() {
        txtlecturerid.setText(tblLecturer.getValueAt(tblLecturer.getSelectedRow(), 0).toString());
        txtname.setText(tblLecturer.getValueAt(tblLecturer.getSelectedRow(), 1).toString());
        txtladdress.setText(tblLecturer.getValueAt(tblLecturer.getSelectedRow(), 2).toString());
        txtEmail.setText(tblLecturer.getValueAt(tblLecturer.getSelectedRow(), 3).toString());
        txtmobile.setText(tblLecturer.getValueAt(tblLecturer.getSelectedRow(), 4).toString());
        cmblgender.setSelectedItem(tblLecturer.getValueAt(tblLecturer.getSelectedRow(), 5).toString());
        cmbFaculty.setSelectedItem(tblLecturer.getValueAt(tblLecturer.getSelectedRow(), 6).toString());
    }

    /*Load faculties to combo box*/
    private void loadFaculties() {
        try {
            facultyLoadCount = 0;
            ArrayList<FacultyDTO> allFaculties = FacultyController.getAllFaculties();
            cmbFaculty.removeAllItems();
            for (FacultyDTO faculty : allFaculties) {
                cmbFaculty.addItem(faculty.getFacultyName());
            }
            facultyLoadCount++;
        } catch (Exception ex) {
            Logger.getLogger(Lecturer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
   
    /*Customize Table*/
    private void customizeLecturerSubjectsTable() {
        tblLecturer.setDefaultRenderer(Object.class, new CustomizeTable());
        tblLecturer.getTableHeader().setDefaultRenderer(new CustomizeTableHeader());
        tblLecturer.setRowHeight(30);
        tblLecturer.setShowGrid(true);
        tblLecturer.setFont(new Font("", 0, 18));
        pneLecturer.getViewport().setBackground(Color.WHITE);

        tblSubjects.setDefaultRenderer(Object.class, new CustomizeTable());
        tblSubjects.getTableHeader().setDefaultRenderer(new CustomizeTableHeader());
        tblSubjects.setRowHeight(30);
        tblSubjects.setShowGrid(true);
        tblSubjects.setFont(new Font("", 0, 18));
        pneSubjects.getViewport().setBackground(Color.WHITE);
    }
     public  void emailValidate(JTextField textField) {
        String text = textField.getText();
        int caretPosition = textField.getCaretPosition();
        if (!text.matches("^[a-z]([a-z0-9]+\\.)*[a-z0-9]+@[a-z0-9]+([a-z0-9]+\\.)*(\\.[a-z0-9]+)+$")) {
            //textField.setText(textField.getText().substring(0, textField.getText ().length() - 1));
            textField.setForeground(Color.red);
        }else{
            textField.setForeground(Color.black);
        }
    }
         public  void validatePhoneNumber(JTextField textField) {
        String text = textField.getText();
        if (!text.matches("\\d{3}\\-\\d{7}")) {
            textField.setForeground(Color.red);
        }else{
            textField.setForeground(Color.black);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddSubjects;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox cmbFaculty;
    private javax.swing.JComboBox cmblgender;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane pneLecturer;
    private javax.swing.JScrollPane pneSubjects;
    private javax.swing.JTable tblLecturer;
    private javax.swing.JTable tblSubjects;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtladdress;
    private javax.swing.JTextField txtlecturerid;
    private javax.swing.JTextField txtmobile;
    private javax.swing.JTextField txtname;
    // End of variables declaration//GEN-END:variables

}
