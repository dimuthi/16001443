/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.FacultyController;
import Controller.RegistrationController;
import Controller.SemesterController;
import Controller.SemesterRegistrationController;
import Controller.StudentRegistrationController;
import Controller.SubjSemRegistrationController;
import Controller.SubjectController;
import DTO.FacultyDTO;
import DTO.SemesterDTO;
import DTO.SemesterRegistrationDTO;
import DTO.StudentDTO;
import DTO.StudentRegistrationDTO;
import DTO.SubjSemRegistrationDTO;
import DTO.SubjectDTO;
import java.awt.Color;
import java.awt.Font;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import utilities.CustomizeTable;
import utilities.CustomizeTableHeader;

/**
 *
 * @author dimut
 */
public class SemesterRegistration extends javax.swing.JPanel {

    private static SemesterRegistration semesterRegistration;
    private int facultyLoadCount;
    private int semesterLoadCount;
    private int subjectCodesLoadCount;
    private DefaultTableModel mdlRegistration;
    private DefaultTableModel mdlsubjects;

    /**
     * Creates new form SemesterModules
     */
    private SemesterRegistration() {
        initComponents();
        setSize(2270, 1140);
        mdlsubjects = (DefaultTableModel) tblsubjects.getModel();
        mdlRegistration = (DefaultTableModel) tblRegistration.getModel();
        AutoCompleteDecorator.decorate(cmbSemester);
        AutoCompleteDecorator.decorate(cmbFaculty);
        AutoCompleteDecorator.decorate(cmbSubCode);
        customizeSubjectsTable();
    }

    public static SemesterRegistration getInstance() {
        if (semesterRegistration == null) {
            semesterRegistration = new SemesterRegistration();
        }
        return semesterRegistration;
    }

    public void setInitialStage() {
        clearFields();
        loadFaculties();
        loadSemesters();
        loadSubjectCodes();
        setSubjectName();
        loadRegistrationTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtCredits = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtfee = new javax.swing.JTextField();
        cmbSemester = new javax.swing.JComboBox();
        cmbSubCode = new javax.swing.JComboBox<String>();
        pneSubjects = new javax.swing.JScrollPane();
        tblsubjects = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        txtregistrationid = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        cmbFaculty = new javax.swing.JComboBox<String>();
        btnAddSubject = new javax.swing.JButton();
        btnremove = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        lblSubjectName = new javax.swing.JLabel();
        lblTextSemester = new javax.swing.JLabel();
        txtsemregid = new javax.swing.JLabel();
        txtstudentname = new javax.swing.JLabel();
        pneRegistration = new javax.swing.JScrollPane();
        tblRegistration = new javax.swing.JTable();
        btnPayments = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(2206, 1035));
        setLayout(null);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(2206, 1035));
        jPanel1.setLayout(null);

        jLabel2.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel2.setText("SEMESTER REGISTRATION ID");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(40, 20, 380, 40);

        jLabel3.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel3.setText("FACULTY");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(40, 90, 207, 40);

        jLabel4.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel4.setText("TOTAL CREDITS");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(280, 1070, 207, 40);

        jLabel5.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel5.setText("SEMESTER");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(1230, 70, 207, 40);

        jLabel6.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel6.setText("SUBJECT NAME");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(1230, 250, 207, 40);

        txtCredits.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        jPanel1.add(txtCredits);
        txtCredits.setBounds(530, 1070, 212, 40);

        jLabel8.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel8.setText("TOTAL FEE");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(870, 1070, 190, 40);

        txtfee.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        jPanel1.add(txtfee);
        txtfee.setBounds(1070, 1070, 212, 40);

        cmbSemester.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        cmbSemester.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSemesterItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbSemester);
        cmbSemester.setBounds(1480, 70, 340, 40);

        cmbSubCode.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        cmbSubCode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSubCodeItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbSubCode);
        cmbSubCode.setBounds(430, 230, 320, 40);

        tblsubjects.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject Code", "Subject Name", "Credits", "Fee"
            }
        ));
        pneSubjects.setViewportView(tblsubjects);

        jPanel1.add(pneSubjects);
        pneSubjects.setBounds(30, 660, 2220, 350);

        jLabel7.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel7.setText("REGISTRATION ID");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(40, 160, 240, 40);

        txtregistrationid.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        txtregistrationid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtregistrationidActionPerformed(evt);
            }
        });
        txtregistrationid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtregistrationidKeyReleased(evt);
            }
        });
        jPanel1.add(txtregistrationid);
        txtregistrationid.setBounds(430, 160, 320, 40);

        btnSave.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jPanel1.add(btnSave);
        btnSave.setBounds(1360, 320, 222, 49);

        jLabel9.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel9.setText("STUDENT NAME");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(1230, 160, 207, 40);

        cmbFaculty.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        cmbFaculty.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFacultyItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbFaculty);
        cmbFaculty.setBounds(430, 90, 320, 40);

        btnAddSubject.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        btnAddSubject.setText("Add Subject");
        btnAddSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSubjectActionPerformed(evt);
            }
        });
        jPanel1.add(btnAddSubject);
        btnAddSubject.setBounds(30, 320, 222, 49);

        btnremove.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        btnremove.setText("Remove Subject");
        btnremove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnremoveActionPerformed(evt);
            }
        });
        jPanel1.add(btnremove);
        btnremove.setBounds(290, 320, 222, 49);

        btnDelete.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel1.add(btnDelete);
        btnDelete.setBounds(1630, 320, 222, 49);

        jLabel10.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        jLabel10.setText("SUBJECT CODE");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(40, 230, 207, 40);

        lblSubjectName.setFont(new java.awt.Font("Bookman Old Style", 0, 20)); // NOI18N
        jPanel1.add(lblSubjectName);
        lblSubjectName.setBounds(1480, 250, 390, 40);

        lblTextSemester.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        jPanel1.add(lblTextSemester);
        lblTextSemester.setBounds(1480, 16, 650, 40);

        txtsemregid.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        jPanel1.add(txtsemregid);
        txtsemregid.setBounds(430, 20, 320, 40);

        txtstudentname.setFont(new java.awt.Font("Bookman Old Style", 0, 20)); // NOI18N
        jPanel1.add(txtstudentname);
        txtstudentname.setBounds(1480, 160, 440, 40);

        tblRegistration.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Semester Registration ID", "Registration ID", "Student Name", "Date"
            }
        ));
        tblRegistration.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRegistrationMouseClicked(evt);
            }
        });
        pneRegistration.setViewportView(tblRegistration);

        jPanel1.add(pneRegistration);
        pneRegistration.setBounds(30, 400, 2220, 230);

        btnPayments.setFont(new java.awt.Font("Bookman Old Style", 1, 22)); // NOI18N
        btnPayments.setText("To Payments");
        btnPayments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPaymentsActionPerformed(evt);
            }
        });
        jPanel1.add(btnPayments);
        btnPayments.setBounds(1910, 320, 222, 49);

        add(jPanel1);
        jPanel1.setBounds(-4, 0, 2280, 1140);
    }// </editor-fold>//GEN-END:initComponents

    private void txtregistrationidKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtregistrationidKeyReleased
        try {
            txtregistrationid.setText(txtregistrationid.getText().toUpperCase());
            generateSemesterRegistrationId();
            setStudentName();
            setTextOnSemester();
            filterSubjectsAndFaculty();
            filterTable();
            txtCredits.setText(null);
            txtfee.setText(null);
        } catch (Exception ex) {
            Logger.getLogger(SemesterRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtregistrationidKeyReleased

    private void cmbSemesterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSemesterItemStateChanged
        if (semesterLoadCount > 0) {
            loadSubjectCodes();
            loadRegistrationTable();
        }
        mdlsubjects.setRowCount(0);
    }//GEN-LAST:event_cmbSemesterItemStateChanged

    private void cmbFacultyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFacultyItemStateChanged
        if (facultyLoadCount > 0) {
            loadSubjectCodes();
            loadRegistrationTable();
        }
        mdlsubjects.setRowCount(0);
    }//GEN-LAST:event_cmbFacultyItemStateChanged

    private void btnAddSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSubjectActionPerformed
        try {
            if (isNotBlank()) {
                int count = 0;
                for (int i = 0; i <= tblsubjects.getRowCount() - 1; i++) {
                    if (tblsubjects.getValueAt(i, 0).equals(cmbSubCode.getSelectedItem().toString())) {
                        count++;
                    }
                }
                if (count == 0) {
                    SubjectDTO subjectDTO = SubjectController.getSubdetailsViaSubId(cmbSubCode.getSelectedItem().toString());
                    Object ob[] = {subjectDTO.getSubjectId(), subjectDTO.getSubjectName(), subjectDTO.getCredits(), subjectDTO.getFee()};
                    mdlsubjects.addRow(ob);
                    calculateTotal();
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(SemesterRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnAddSubjectActionPerformed

    private void btnremoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnremoveActionPerformed
        if (tblsubjects.getSelectedRow() > -1) {
            mdlsubjects.removeRow(tblsubjects.getSelectedRow());
            calculateTotal();
        }
    }//GEN-LAST:event_btnremoveActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (isNotBlank()) {
            try {
                SemesterRegistrationDTO semesterRegistrationDTO = new SemesterRegistrationDTO();
                semesterRegistrationDTO.setRegistrationId(txtregistrationid.getText());
                semesterRegistrationDTO.setSemesterRegistrationId(txtsemregid.getText());
                semesterRegistrationDTO.setSemesterid(SemesterController.getSemesterId(cmbSemester.getSelectedItem().toString()).getSemesterid());
                ArrayList<String> subCodes = new ArrayList<>();
                for (int i = 0; i < tblsubjects.getRowCount(); i++) {
                    subCodes.add(tblsubjects.getValueAt(i, 0).toString());
                  
                }
                semesterRegistrationDTO.setSubjectCodesList(subCodes);
                boolean addSemesterRegistration = SemesterRegistrationController.addSemesterRegistration(semesterRegistrationDTO);
                if (addSemesterRegistration) {
                    loadRegistrationTable();
                    //loadSubjectsTable();
                    //for(int i=0;i<tblsubjects.getRowCount();i++){
                       // SubjSemRegistrationDTO subjSemRegistrationDTO=new SubjSemRegistrationDTO();
                        //subjSemRegistrationDTO.setSemesterRegistrationId(txtsemregid.getText());
                        //subjSemRegistrationDTO.setSubjectId(tblsubjects.getValueAt(i, 0).toString());
                        //boolean b= SubjSemRegistrationController.addSubjSemRegistration(subjSemRegistrationDTO);
                   // }
                    
                }
            } catch (SQLException e) {
                if (e.getErrorCode() == 1062) {

                }
            } catch (Exception ex) {
                Logger.getLogger(SemesterRegistration.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (tblRegistration.getSelectedRow() > -1) {
            try {
                SemesterRegistrationDTO semesterRegistrationDTO = new SemesterRegistrationDTO();
                semesterRegistrationDTO.setSemesterRegistrationId(tblRegistration.getValueAt(tblRegistration.getSelectedRow(), 0).toString());
                boolean deleteSemesterRegistration = SemesterRegistrationController.deleteSemesterRegistration(semesterRegistrationDTO);
                if (deleteSemesterRegistration) {
                    loadRegistrationTable();
                    mdlsubjects.setRowCount(0);
                }
            } catch (Exception ex) {
                Logger.getLogger(SemesterRegistration.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void cmbSubCodeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSubCodeItemStateChanged
        if (subjectCodesLoadCount > 0) {
            setSubjectName();
        }
    }//GEN-LAST:event_cmbSubCodeItemStateChanged

    private void tblRegistrationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRegistrationMouseClicked
        loadSubjectsTable();
        calculateTotal();
        loadDataToFields();
    }//GEN-LAST:event_tblRegistrationMouseClicked

    private void btnPaymentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPaymentsActionPerformed
        if (isNotBlank()) {
            WelcomePage.getInstance().setPaymentsPanel();
            Payment payment = Payment.getInstance();
            ArrayList<String> text = new ArrayList<>();
            text.add(txtsemregid.getText());
            text.add(txtstudentname.getText());
            text.add(txtfee.getText());
            payment.setPaymentDetails(text);
        }
    }//GEN-LAST:event_btnPaymentsActionPerformed

    private void txtregistrationidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtregistrationidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtregistrationidActionPerformed

    /*Set student name using registration id*/
    private void setStudentName() {
        try {
            StudentDTO studentNameViaRegId = RegistrationController.getStudentNameViaRegId(txtregistrationid.getText());
            txtstudentname.setText(null);
            if (studentNameViaRegId.getFirstName() != null && studentNameViaRegId.getLastName() != null) {
                txtstudentname.setText(studentNameViaRegId.getFirstName() + " " + studentNameViaRegId.getLastName());
            }
            mdlsubjects.setRowCount(0);
        } catch (Exception ex) {
            Logger.getLogger(SemesterRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Generate semester registration id using registration id
    private void generateSemesterRegistrationId() {
        String numbers = "YS";
        Pattern p = Pattern.compile("\\d+");
        Matcher m = p.matcher(cmbSemester.getSelectedItem().toString());
        while (m.find()) {
            numbers += m.group();
        }
        txtsemregid.setText(txtregistrationid.getText() + numbers);
    } */
    private void generateSemesterRegistrationId(){
       String sem=cmbSemester.getSelectedItem().toString();
       txtsemregid.setText(txtregistrationid.getText()+"Y"+sem.charAt(5)+"S"+sem.charAt(16));
    }

    /*Load data to textfields*/
    private void loadDataToFields() {
        txtsemregid.setText(tblRegistration.getValueAt(tblRegistration.getSelectedRow(), 0).toString());
        txtregistrationid.setText(tblRegistration.getValueAt(tblRegistration.getSelectedRow(), 1).toString());
        txtstudentname.setText(tblRegistration.getValueAt(tblRegistration.getSelectedRow(), 2).toString());
    }

    /*Load registration table with faculty id,semester id using registration id (while typing)*/
    private void filterTable() {
        try {
            SemesterRegistrationDTO semesterRegistrationDTO = new SemesterRegistrationDTO();
            semesterRegistrationDTO.setFacultyId(FacultyController.getFacultyId(cmbFaculty.getSelectedItem().toString()).getFacultyId());
            semesterRegistrationDTO.setSemesterid(SemesterController.getSemesterId(cmbSemester.getSelectedItem().toString()).getSemesterid());
            semesterRegistrationDTO.setRegistrationId(txtregistrationid.getText());
            ArrayList<SemesterRegistrationDTO> semesterRegistrations = SemesterRegistrationController.getSemesterRegistrationsViaRegId(semesterRegistrationDTO);
            mdlRegistration.setRowCount(0);
            for (SemesterRegistrationDTO semesterRegistration : semesterRegistrations) {
                Object[] ob = {semesterRegistration.getSemesterRegistrationId(), semesterRegistration.getRegistrationId(), (semesterRegistration.getFirstName() + " " + semesterRegistration.getLastName()), semesterRegistration.getDate()};
                mdlRegistration.addRow(ob);
            }
        } catch (Exception ex) {
            Logger.getLogger(SemesterRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Load subject codes and set faculty to combo boxes respectively using faculty id,semester id,degree id and registration id (while typing)*/
    private void filterSubjectsAndFaculty() {
        try {
            if (txtstudentname.getText() != null) {
                subjectCodesLoadCount = 0;
                cmbFaculty.setSelectedItem(RegistrationController.getFacultyNameViaRegId(txtregistrationid.getText()).getFacultyName());

                SubjectDTO subjectDTO = new SubjectDTO();
                subjectDTO.setFacultyId(FacultyController.getFacultyId(cmbFaculty.getSelectedItem().toString()).getFacultyId());
                subjectDTO.setSemesterid(SemesterController.getSemesterId(cmbSemester.getSelectedItem().toString()).getSemesterid());
                subjectDTO.setDegreeId(StudentRegistrationController.getDegreeViaStudentRegistration(txtregistrationid.getText()).getDegreeid());
                ArrayList<SubjectDTO> relaventSubjectCodesViaDegreeId = SubjectController.getRelaventSubjectCodesViaDegreeId(subjectDTO);
                cmbSubCode.removeAllItems();
                for (SubjectDTO relaventSubject : relaventSubjectCodesViaDegreeId) {
                    cmbSubCode.addItem(relaventSubject.getSubjectName());
                }
                subjectCodesLoadCount++;
                setSubjectName();
            }
        } catch (Exception ex) {
            Logger.getLogger(SemesterRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Set text according to the intake using registration id (while typing)*/
    private void setTextOnSemester() {
        try {
            StudentRegistrationDTO intakeWithDate = StudentRegistrationController.getIntakeWithDate(txtregistrationid.getText());
            if ("JULY".equals(intakeWithDate.getIntake())) {
              // Date date = new Date();
                //SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy");
               //if (Integer.parseInt(intakeWithDate.getDate()) <= Integer.parseInt(dateFormat.format(date))) {
                    lblTextSemester.setText("Register only for second semester");
                } else {
                    lblTextSemester.setText("Should register for both first & second semesters");
                }
           // } else {
                //lblTextSemester.setText("Should register for both first & second semesters");
           // }

        } catch (Exception ex) {
            Logger.getLogger(SemesterRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Load registration table with faculty id,semester id*/
    private void loadRegistrationTable() {
        try {
            SemesterRegistrationDTO semesterRegistrationDTO = new SemesterRegistrationDTO();
            semesterRegistrationDTO.setFacultyId(FacultyController.getFacultyId(cmbFaculty.getSelectedItem().toString()).getFacultyId());
            semesterRegistrationDTO.setSemesterid(SemesterController.getSemesterId(cmbSemester.getSelectedItem().toString()).getSemesterid());
            ArrayList<SemesterRegistrationDTO> semesterRegistrations = SemesterRegistrationController.getSemesterRegistrations(semesterRegistrationDTO);
            mdlRegistration.setRowCount(0);
            for (SemesterRegistrationDTO semesterRegistration : semesterRegistrations) {
                Object[] ob = {semesterRegistration.getSemesterRegistrationId(), semesterRegistration.getRegistrationId(), (semesterRegistration.getFirstName() + " " + semesterRegistration.getLastName()), semesterRegistration.getDate()};
                mdlRegistration.addRow(ob);
            }
        } catch (Exception ex) {
            Logger.getLogger(SemesterRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Load subjects table using registration id when click on registration table*/
    private void loadSubjectsTable() {
        if (tblRegistration.getSelectedRow() > -1) {
            try {
                ArrayList<SubjectDTO> allSubjectsViaSemRegId = SubjectController.getAllSubjectsViaSemRegId(tblRegistration.getValueAt(tblRegistration.getSelectedRow(), 0).toString());
                mdlsubjects.setRowCount(0);
                for (SubjectDTO subjectDTO : allSubjectsViaSemRegId) {
                    Object[] ob = {subjectDTO.getSubjectId(), subjectDTO.getSubjectName(), subjectDTO.getCredits(), subjectDTO.getFee()};
                    mdlsubjects.addRow(ob);
                }
            } catch (Exception ex) {
                Logger.getLogger(SemesterRegistration.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /*Set subject name according to subject code while changing subject code in combo box*/
    private void setSubjectName() {
        try {
            String subjectName = "";
            if (cmbSubCode.getSelectedItem() != null) {
                subjectName = SubjectController.getRelaventSubjectNameViaCode(cmbSubCode.getSelectedItem().toString()).getSubjectName();
            } else {
                subjectName = "";
            }
            lblSubjectName.setText(subjectName);
        } catch (Exception ex) {
            Logger.getLogger(SemesterRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Load subject codes to combo box using faculty id and semster id*/
    private void loadSubjectCodes() {
        try {
            subjectCodesLoadCount = 0;
            SubjectDTO subjectDTO = new SubjectDTO();
            subjectDTO.setFacultyId(FacultyController.getFacultyId(cmbFaculty.getSelectedItem().toString()).getFacultyId());
            subjectDTO.setSemesterid(SemesterController.getSemesterId(cmbSemester.getSelectedItem().toString()).getSemesterid());
            ArrayList<SubjectDTO> relaventSubjects = SubjectController.getRelaventSubjectCodes(subjectDTO);
            cmbSubCode.removeAllItems();
            for (SubjectDTO relaventSubject : relaventSubjects) {
                cmbSubCode.addItem(relaventSubject.getSubjectName());
            }
            subjectCodesLoadCount++;
            setSubjectName();
        } catch (Exception ex) {
            Logger.getLogger(SemesterRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Load faculties to combo box*/
    private void loadFaculties() {
        try {
            facultyLoadCount = 0;
            ArrayList<FacultyDTO> allFaculties = FacultyController.getAllFaculties();
            cmbFaculty.removeAllItems();
            for (FacultyDTO faculty : allFaculties) {
                cmbFaculty.addItem(faculty.getFacultyName());
            }
            facultyLoadCount++;
        } catch (Exception ex) {
            Logger.getLogger(Lecturer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Load semsters to combo box*/
    private void loadSemesters() {
        try {
            semesterLoadCount = 0;
            ArrayList<SemesterDTO> semesterDTOs = SemesterController.getAllSemesters();
            cmbSemester.removeAllItems();
            for (SemesterDTO semesterDTO : semesterDTOs) {
                cmbSemester.addItem(semesterDTO.getSemesterName());
            }
            semesterLoadCount++;
        } catch (Exception ex) {
            Logger.getLogger(Lecturer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Calculate total credits and fee, then set to text fields*/
    private void calculateTotal() {
        int credits = 0;
        for (int i = 0; i < tblsubjects.getRowCount(); i++) {
            credits += Integer.parseInt(tblsubjects.getValueAt(i, 2).toString());
        }
        txtCredits.setText(credits + "");
        double fee = 0;
        for (int i = 0; i < tblsubjects.getRowCount(); i++) {
            fee += Double.parseDouble(tblsubjects.getValueAt(i, 3).toString());
        }
        txtfee.setText(fee + "");
    }

    /*Check whether the textfields are empty*/
    private boolean isNotBlank() {
        return (!txtregistrationid.getText().equals("") && txtsemregid.getText() != null && txtstudentname.getText() != null);
    }

    /*Clear textfields*/
    private void clearFields() {
        txtCredits.setText(null);
        txtfee.setText(null);
        txtregistrationid.setText(null);
        txtsemregid.setText(null);
        txtstudentname.setText(null);
    }

    /*Customize Table*/
    private void customizeSubjectsTable() {
        tblsubjects.setDefaultRenderer(Object.class, new CustomizeTable());
        tblsubjects.getTableHeader().setDefaultRenderer(new CustomizeTableHeader());
        tblsubjects.setRowHeight(30);
        tblsubjects.setShowGrid(true);
        tblsubjects.setFont(new Font("", 0, 18));
        pneSubjects.getViewport().setBackground(Color.WHITE);

        tblRegistration.setDefaultRenderer(Object.class, new CustomizeTable());
        tblRegistration.getTableHeader().setDefaultRenderer(new CustomizeTableHeader());
        tblRegistration.setRowHeight(30);
        tblRegistration.setShowGrid(true);
        tblRegistration.setFont(new Font("", 0, 18));
        pneRegistration.getViewport().setBackground(Color.WHITE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddSubject;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnPayments;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnremove;
    private javax.swing.JComboBox<String> cmbFaculty;
    private javax.swing.JComboBox cmbSemester;
    private javax.swing.JComboBox<String> cmbSubCode;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblSubjectName;
    private javax.swing.JLabel lblTextSemester;
    private javax.swing.JScrollPane pneRegistration;
    private javax.swing.JScrollPane pneSubjects;
    private javax.swing.JTable tblRegistration;
    private javax.swing.JTable tblsubjects;
    private javax.swing.JTextField txtCredits;
    private javax.swing.JTextField txtfee;
    private javax.swing.JTextField txtregistrationid;
    private javax.swing.JLabel txtsemregid;
    private javax.swing.JLabel txtstudentname;
    // End of variables declaration//GEN-END:variables

}
